package hci.gnomex.daemon.auto_import;




import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FilterFile {

	public static void main(String[] args) {
		
		String inFile = "";
		String remoteChecksumFile = ""; // the checksums on where generated before files where uploaded to our disk
		String localDataPath = "";
		String localChecksumFile = ""; // the checksums where generated by us on the file list
		String remoteFileList = ""; // the list of only xml and pdf files (small files)
		
		
		List<String> smallFilesList = new ArrayList<String>();
		
		
		if(args.length == 5) {
			inFile = args[0];
			remoteChecksumFile = args[1];
			localDataPath = args[2];
			localChecksumFile = args[3];
			remoteFileList = args[4];
			

		}else {
			System.out.println("Please provide the name of input file and the name of remote checksum out file. Then the local checksum out file");
			System.exit(1);
		}
		
	

		FoundationContainer fContainer = new FoundationContainer();
		PeekableScanner scan = null;
		try {
			scan = new PeekableScanner(new File(inFile));
			
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String currentLine = "";
		String regex = "(^(T|C)RF[a-zA-Z0-9]+_?[a-zA-Z]*)\\.(.*)";
		Pattern r = Pattern.compile(regex);
	
		String newGroup = "";
		
		
		while(scan.hasNext()) {
			currentLine = scan.next();
			Matcher m = r.matcher(currentLine);
			String fileName = "";
			String extension ="";
			
			if(m.matches()) {
				fileName= m.group(1);
				extension= m.group(3);
				
			}
			
			
			String[] splitExtension = null;
			splitExtension = extension.split("\\.");
			
		
			
			if(splitExtension.length < 2 && !extension.equals("bam"))  { // for xml and pdf files
				smallFilesList.add(currentLine);
			}else if(splitExtension[splitExtension.length - 1 ].equals("md5")) {
				String[] excludeEndList = Arrays.copyOfRange(splitExtension, 0, splitExtension.length - 1);
				String excludeEnd =  String.join(".", excludeEndList);
				String key = fileName + "." + excludeEnd;

				String value = fContainer.getLargeFileValue(key); 
				if(value != null) { // make sure file exists and by the virtue of the md5 file being in the list we also believe it is not corrupted (risky assumption need to test)
					fContainer.addLargeFile(key, currentLine);
					try {
						String checksum = fContainer.loadCheckSum(localDataPath + currentLine);
						String sumWithFile = checksum + "  "+ key; 
						fContainer.writeCheckSumList(remoteChecksumFile, sumWithFile);


					} catch (Exception e) {
						e.printStackTrace();
					}

				}


			}else {
				fContainer.addLargeFile(currentLine,"");

			}
				
		} // end of while
		fContainer.writeSmallFilesList(remoteFileList, smallFilesList );
		fContainer.makeLocalCheckSums(localChecksumFile,localDataPath);
		
		
			
	}

}
