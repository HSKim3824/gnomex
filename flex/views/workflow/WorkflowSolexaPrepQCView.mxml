<?xml version="1.0" encoding="utf-8"?>
<mx:VBox styleName="panelBox"
		 xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:views="views.*"
		 xmlns:util="views.util.*"
		 xmlns:renderers="views.renderers.*"
		 width="100%" height="100%"
		 show="init()"
>
	<mx:HBox verticalAlign="middle">
		<mx:Image source="{parentApplication.iconLibPrep}"/>
		<mx:Label id="titleLabel" styleName="titleLabel"
				  text="" />
	</mx:HBox>

	<mx:HTTPService
			id="getWorkList"
			url="GetWorkItemList.gx"
			resultFormat="e4x"
			concurrency="multiple"
			destination="getWorkList"
			showBusyCursor="true"
			result="onGetWorkList(event)"
			fault="parentApplication.onFailHttpRequest('Unable to get work list', event)"
			useProxy="false">
		<mx:request>
			<codeStepNext>{codeStepNext}</codeStepNext>
		</mx:request>
	</mx:HTTPService >

	<mx:HTTPService
			id="saveWorkItem"
			url="SaveWorkItemSolexaPrepQC.gx"
			resultFormat="e4x"
			concurrency="multiple"
			showBusyCursor="true"
			result="onSaveWorkItem(event)"
			fault="parentApplication.onFailHttpRequest('Unable to save work list', event)"
			method="POST"
			useProxy="false">
		<mx:request>
			<workItemXMLString>{dirtyWorkItems.toXMLString()}</workItemXMLString>
		</mx:request>
	</mx:HTTPService >

	<mx:XMLListCollection id="workList" source="{getWorkList.lastResult.WorkItem}"/>

	<mx:XMLListCollection id="seqLibProtocols" source="{parentApplication.seqLibProtocolsWithAppFilters.copy()}" filterFunction="filterSeqLibProtocols" />

	<mx:Script>
        <![CDATA[
		import hci.flex.util.DictionaryManager;

		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;
		import mx.events.ValidationResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.validators.NumberValidator;

		import views.renderers.ComboBox;
		import views.util.DictionaryHelper;

		[Bindable]
		public var codeStepNext:String;

		[Bindable]
		private var requestNumberCount:String;

		[Bindable]
		private var inputNumber:String;

		[Bindable]
		private var dirtyWorkItems:XMLListCollection;

		[Bindable]
		private var requestNumbers:ArrayCollection;

		[Bindable]
		private var requestCategories:XML = <Categories><RequestCategory label="NovaSeq, HiSeq, MiSeq combined" codeStepNext="ALLPREPQC"/><RequestCategory label="Illumina NovaSeq" codeStepNext="NOSEQPREPQC"/><RequestCategory label="Illumina HiSeq" codeStepNext="HSEQPREPQC"/><RequestCategory label="Illumina MiSeq" codeStepNext="MISEQPREPQC"/></Categories>;

		private function init():void {
			//select the index of the category combo based off of what lib prep view we are in (noseq or hiseq or miseq)
			for(var i: int = 0; i < categoryCombo.dataProvider.length; i++){
				if(categoryCombo.dataProvider[i].@codeStepNext == parentDocument.codeStepNext){
					categoryCombo.selectedIndex = i;
					break;
				}
			}
		}

		public function titleInit():void {
			if(codeStepNext == 'SEQPREPQC') {
				titleLabel.text = 'Illumina GAIIx Library Prep QC';
			} else if (codeStepNext == 'HSEQPREPQC') {
				titleLabel.text = 'Illumina HiSeq Library Prep QC';
			} else if (codeStepNext == 'NOSEQPREPQC') {
				titleLabel.text = 'Illumina NovaSeq Library Prep QC';
			} else if (codeStepNext == 'MISEQPREPQC') {
				titleLabel.text = 'Illumina MiSeq Library Prep QC';
			}

		}

		private function refreshWorkList():void {
			dirty.resetDirty();
			getWorkList.send();
		}

		private function underlyingWorkItemDataChange(event:CollectionEvent):void {
			if (event.kind == CollectionEventKind.RESET || event.kind == CollectionEventKind.REFRESH) {
				// ignore refresh and resets to work list
			} else {
				dirty.setDirty();
				this.workList.filterFunction = null;
			}
		}
		private function getGridRowNumber(item:Object,col:int):String
		{
			if (workList!= null) {
				var x:int = workList.getItemIndex(item) + 1;
				return String(x);
			} else {
				return "";
			}
		}

		public function onEdit():void {
			workList.filterFunction = null;
			workListGrid.selectedItem.@isDirty = "Y";
		}

		private function validate():Boolean {
			var message:String = "";
			var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');

			var nv:NumberValidator = new NumberValidator();
			nv.domain = "real";
			nv.minValue = "0";
			nv.maxValue = "99999";
			nv.precision = 3;
			nv.allowNegative = false;
			nv.exceedsMaxError = "exceeds max.";
			nv.invalidCharError = "contains invalid characters.";
			nv.negativeError = "cannot be negative.";
			nv.precisionError = "has too many digits beyond the decimal point";
			nv.requiredFieldError = "is required.";

			var item:Object = null;
			var vr:ValidationResultEvent  = null;


			if (message != "") {
				Alert.show(message);
				return false;
			} else {
				return true;
			}

			return true;
		}

		private function save():void {
			if (validate() == false) {
				return;
			}

			var dirtyItems:XMLList = getWorkList.lastResult.WorkItem.(@isDirty == 'Y');
			dirtyWorkItems = new XMLListCollection(dirtyItems);
			saveWorkItem.send();
		}


		private function onGetWorkList(event:ResultEvent):void {
			if (event.result.name() == "WorkItemList") {
				var sort:Sort = new Sort();
				sort.compareFunction = this.sortSampleNumber;
				workList.sort = sort;
				requestNumberCombo.selectedIndex = 0;
				workList.refresh();
				refreshRequestNumbers();
				workList.addEventListener(CollectionEvent.COLLECTION_CHANGE, this.underlyingWorkItemDataChange);
			} else {
				Alert.show(event.result..ERROR.@message.toString(), "Error getting work list");
			}
		}

		private function onSaveWorkItem(event:ResultEvent):void {
			if (saveWorkItem.lastResult.name() == "WorkItemList" || saveWorkItem.lastResult.name() == "SUCCESS" ) {
				dirty.resetDirty();
				this.getWorkList.send();
			} else {
				Alert.show(saveWorkItem.lastResult..ACTMESSAGE.@TEXT);
			}
		}


		private function refreshRequestNumbers():void {
			requestNumbers = new ArrayCollection();

			var blankItem:Object = new Object();
			blankItem.data = "";
			blankItem.label = "";
			requestNumbers.addItem(blankItem);

			for(var x:Number = 0; x < workList.length; x++) {
				var item:Object = workList.getItemAt(x, 0);

				var found:Boolean = false;
				for(var i:Number = 0; i < requestNumbers.length; i++) {
					if (requestNumbers.getItemAt(i).label == item.@requestNumber) {
						found = true;
						break;
					}
				}
				if (found == false) {
					var newItem:Object = new Object();
					newItem.data = item.@requestNumber;
					newItem.label = item.@requestNumber;
					requestNumbers.addItem(newItem);
				}
			}
			requestNumberCount = (requestNumbers.length - 1) + " requests in work list.";
		}

		private function filterWorkList(item:Object):Boolean {
			var keep:Boolean = true;
			if (requestNumberCombo.selectedItem != null && requestNumberCombo.selectedItem.label != "") {
				keep = false;
				if (item.@requestNumber == requestNumberCombo.selectedItem.label) {
					keep = true;
				}
			}
			return keep;
		}


		private function getSeqLibProtocol(item:Object,col:DataGridColumn):String
		{
			return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SeqLibProtocol", item.@idSeqLibProtocol);
		}


		private function getSampleType(item:Object,col:DataGridColumn):String
		{
			return parentApplication.dictionaryManager.getEntryDisplay("hci.gnomex.model.SampleType", item.@idSampleType);
		}

		private function sortSampleNumber(item1:Object, item2:Object, fields:Array=null):int {
			var n1:String  = item1.@sampleNumber;
			var n2:String  = item2.@sampleNumber;

			var parts:Array = n1.split("X");
			var num1:String = parts[0];
			var rem1:String = parts[1];
			var firstChar1:String = num1.substr(0,1);
			if ("0123456789".indexOf(firstChar1) >= 0) {
				firstChar1 = "0";
			} else {
				num1 = num1.substr(1);
			}

			parts = n2.split("X");
			var num2:String = parts[0];
			var rem2:String = parts[1];
			var firstChar2:String = num2.substr(0,1);
			if ("0123456789".indexOf(firstChar2) >= 0) {
				firstChar2 = "0";
			} else {
				num2 = num2.substr(1);
			}

			var comp:int = stringCompare(firstChar1, firstChar2);

			if (comp == 0) {
				var number1:Number = Number(num1);
				var number2:Number = Number(num2);
				if (number1 > number2) {
					comp = 1;
				} else if (number2 > number1) {
					comp = -1;
				}
			}

			if (comp == 0) {
				var remNum1:Number = Number(rem1);
				var remNum2:Number = Number(rem2);
				if (remNum1 > remNum2) {
					comp = 1
				} else if (remNum2 > remNum1) {
					comp = -1;
				}
			}

			return comp;
		}

		private static function stringCompare(s1:String, s2:String):int {
			if (s1 > s2) {
				return 1;
			} else if (s2 > s1) {
				return -1;
			} else {
				return 0;
			}
		}

		private function filterSeqLibProtocols(item:Object):Boolean {
			if (item.@value == "") {
				return true;
			}
			if (item.@codeApplicationType != 'Illumina') {
				return false;
			}
			if (!parentApplication.isCoreFacilityIManage(item.@idCoreFacility)) {
				return false;
			}
			return true;
		}
		]]>
    </mx:Script>


	<mx:VBox verticalGap="2" width="100%" height="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0">
		<mx:HBox width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" verticalAlign="bottom">
			<mx:HBox  verticalAlign="middle">
				<mx:Label text="Request #"/>
				<mx:ComboBox id="requestNumberCombo" dataProvider="{requestNumbers}" change="workList.filterFunction = filterWorkList;workList.refresh()"  width="90"></mx:ComboBox>
			</mx:HBox>
			<mx:HBox  verticalAlign="middle">
				<mx:ComboBox id="categoryCombo" dataProvider="{requestCategories.RequestCategory}" labelField="@label" change="{this.codeStepNext = categoryCombo.selectedItem.@codeStepNext; getWorkList.send()}"></mx:ComboBox>
			</mx:HBox>
			<mx:Spacer width="100%"/>
			<mx:Label text="{requestNumberCount}"/>
		</mx:HBox>

		<mx:VBox width="100%" height="100%" verticalGap="0">

			<util:DataGridAlternatingGroup height="100%" id="workListGrid"  width="100%" dataProvider="{workList}" editable="true" itemEditEnd="onEdit()">
				<util:columns>
					<mx:DataGridColumn editable="false" headerText=""   width="5" labelFunction="getGridRowNumber"/>
					<mx:DataGridColumn editable="false" headerText="Sample #" width="12" dataField="@sampleNumber" sortCompareFunction="sortSampleNumber"/>

					<mx:DataGridColumn editable="false" headerText="Client"  width="12" dataField="@appUserName" />

					<mx:DataGridColumn headerText="Vol. (uL)" width="10" dataField="@sampleVolume"
									   editable="false"/>

					<mx:DataGridColumn visible="true"
									   headerText="Library QC Protocol"
									   width="20"
									   dataField="@idLibPrepQCProtocol"
									   editorDataField="value"
									   sortable="false"
									   rendererIsEditor="false"
									   itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.LibraryPrepQCProtocol').DictionaryEntry, '@display', '@value', '@idLibPrepQCProtocol')}"
									   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBoxLibraryPrepQCProtocol.getFactory(parentApplication).newInstance(), 'idRequest')}"/>

					<mx:DataGridColumn headerText="Library QC Conc." width="10" dataField="@qcLibConcentration"
									   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), 'idRequest')}" editorDataField="value">
					</mx:DataGridColumn>


					<mx:DataGridColumn headerText="Status"  width="20" dataField="@seqPrepQCStatus"
									   editorDataField="value"
									   rendererIsEditor="false"
									   itemRenderer="mx.controls.Label"
									   sortable="false"
									   itemEditor="{views.renderers.GridColumnFillButton.create(views.renderers.ComboBoxWorkflowStatus.create('@seqPrepQCStatus').newInstance(), 'idRequest')}"/>

				</util:columns>
			</util:DataGridAlternatingGroup>

		</mx:VBox>

	</mx:VBox>

	<mx:ControlBar width="100%">
		<mx:LinkButton textDecoration="underline" label="Refresh"  icon="@Embed('../../assets/action_refresh.gif')"
					   click="refreshWorkList();" toolTip="Refresh worklist"/>
		<mx:HBox width="100%" horizontalAlign="right">
			<util:DirtyNote id="dirty"/>
			<mx:Button label="Save" click="save()" icon="@Embed('../../assets/action_save.gif')">
			</mx:Button>
		</mx:HBox>

	</mx:ControlBar>

</mx:VBox>
