<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:renderers="views.renderers.*"
                title="{theTitle}"
                showCloseButton="true"
                close="{PopUpManager.removePopUp(this)}"
                horizontalScrollPolicy="off"
                verticalScrollPolicy="off">

    <mx:HTTPService
            id="managePedFileSave"
            url="ManagePedFile.gx"
            concurrency="multiple"
            resultFormat="e4x"
            result="onManagePedFileSave(event)"
            showBusyCursor="true"
            fault="parentApplication.onFailHttpRequest('Unable to save ped file', event)"
            method="POST"
            useProxy="false">
    </mx:HTTPService>

    <mx:HTTPService
            id="managePedFileSetup"
            url="ManagePedFile.gx"
            concurrency="multiple"
            resultFormat="e4x"
            result="onManagePedFileSetup(event)"
            showBusyCursor="true"
            fault="parentApplication.onFailHttpRequest('Unable to create ped file', event)"
            method="POST"
            useProxy="false">
    </mx:HTTPService>

    <mx:HTTPService
            id="makeGeneURL"
            url="MakeGeneURL.gx"
            concurrency="multiple"
            resultFormat="e4x"
            result="onMakeGeneURL(event)"
            showBusyCursor="true"
            fault="parentApplication.onFailHttpRequest('Unable to launch gene.iobio.io', event)"
            method="POST"
            useProxy="false">
    </mx:HTTPService>

    <mx:Script>
		<![CDATA[
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.collections.XMLListCollection;
        import mx.controls.Alert;
        import mx.events.DataGridEvent;
        import mx.events.DataGridEventReason;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import views.renderers.DropdownLabel;

        import hci.flex.controls.ComboBox;

        [Bindable]
        private var selectedProband:Object = null;

        public var idAnalysis:Object = null;

        public var idLab:Object = null;

        [Bindable]
        public var parentWindow:Object = null;

        [Bindable]
        public var vcfInfo:XMLList;

        [Bindable]
        public var bamInfo:XMLList;

        [Bindable]
        public var pedInfo:XMLList;

        [Bindable]
        public var pedFile:XMLList;

        [Bindable]
        public var reason:XMLList;

        [Bindable]
        public var theXML:XML;

        [Bindable]
        public var thereason:String;

        [Bindable]
        public var okToSave:Boolean;

        [Bindable]
        public var moreThanOne:Boolean;

        [Bindable]
        public var errorMessage:String;

        [Bindable]
        public var theTitle:String = "Manage Ped File";

        [Bindable]
        public var currentPedFile:int = 0;

        public function init():void {

            okToSave = false;
            moreThanOne = pedInfo.PEDPath.length() > 1;
            currentPedFile = 1;

            theTitle = "Manage Ped File" + " --" + getPedFileName(currentPedFile);

            var sample_idSort:Sort = new Sort();
            sample_idSort.fields = [new SortField('@sample_id', true)];

            pedEntry.sort = sample_idSort;
            pedEntry.refresh();

            sample_idList = XMLList(<PEDEntry kindred_id="" sample_id="0" paternal_id="0" maternal_id="0" sex="" affection_status="1" project="" bam="" vcf="" />);
            sample_idList += new XMLList(pedFile.PEDEntry.toXMLString());

            bamList = XMLList(<BAMPath path = "" />);
            bamList += new XMLList(bamInfo.BAMPath.toXMLString());

            vcfList = XMLList(<VCFPath path = "" />);
            vcfList += new XMLList(vcfInfo.VCFPath.toXMLString());

            thereason = reason[0].@reason;
            setDirections(thereason);
            setColumnWidths();
        }

        private function setDirections(thereason:String):void {
            // reset to default state
            this.errorAction.visible = false;
            this.errorAction.includeInLayout = false;
            this.launchAction.visible = false;
            this.launchAction.includeInLayout = false;
            this.saveAction.visible = false;
            this.saveAction.includeInLayout = false;
            this.parentAction.visible = false;
            this.parentAction.includeInLayout = false;

            if (thereason.indexOf("Error") >= 0) {
                this.errorAction.visible = true;
                this.errorAction.includeInLayout = true;
                errorMessage = thereason;
//                return;
            }

            if (thereason.indexOf("choose") >= 0) {
                this.launchAction.visible = true;
                this.launchAction.includeInLayout = true;
            }

            if (thereason.indexOf("save") >= 0) {
                this.saveAction.visible = true;
                this.saveAction.includeInLayout = true;
                okToSave = true;
            }

            if (thereason.indexOf("parent") >= 0) {
                this.parentAction.visible = true;
                this.parentAction.includeInLayout = true;
                okToSave = true;
            }
        }

        private function savePedFile():void {
            var params:Object = new Object();
            params.idAnalysis = this.idAnalysis;
            params.fileOffset = currentPedFile - 1;
            params.action = "save";
            params.PEDInfo = pedInfo.toXMLString();
            params.PEDFile = pedFile.toXMLString();
            managePedFileSave.send(params);
        }

        private function onManagePedFileSave(event:ResultEvent):void {
            okToSave = false;
            this.saveAction.visible = false;
            this.saveAction.includeInLayout = false;
            this.parentAction.visible = false;
            this.parentAction.includeInLayout = false;
            this.errorAction.visible = false;
            this.errorAction.includeInLayout = false;

            if (managePedFileSave.lastResult.name() == "SUCCESS") {
                Alert.show("Ped file saved. Select the sample_id of the trio proband and press Launch.");
            } else {
                Alert.show(event.result..ERROR.@message.toString(), "Error saving ped file.");
            }
        }

        private function launchViewer():void {
            var params:Object = new Object();
            params.idAnalysis = this.idAnalysis;
            params.proband = selectedProband.toXMLString();
            params.VCFInfo = vcfInfo.toXMLString();
            params.BAMInfo = bamInfo.toXMLString();
            params.PEDFile = pedFile.toXMLString();
            makeGeneURL.send(params);

        }

        private function onMakeGeneURL(event:ResultEvent):void {
            if (makeGeneURL.lastResult.name() == "SUCCESS") {
                navigateToURL(new URLRequest(makeGeneURL.lastResult.@urlsToLink), "_blank");
            }
            else if (makeGeneURL.lastResult.name() == "PROBLEM") {
                Alert.show(makeGeneURL.lastResult.@status, "Error launching gene.iobio.io");
            }
            else {
                Alert.show(event.result..ERROR.@message.toString(), "Error launching gene.iobio.io");
            }
        }

        private function setupPedFile():void {
            var params:Object = new Object();
            params.idAnalysis = this.idAnalysis;
            params.action = "setup";
            params.fileOffset = currentPedFile - 1;
            params.VCFInfo = vcfInfo.toXMLString();
            params.BAMInfo = bamInfo.toXMLString();
            params.PEDInfo = pedInfo.toXMLString();
            managePedFileSetup.send(params);
        }


        private function onManagePedFileSetup(event:ResultEvent):void {
            pedFile = managePedFileSetup.lastResult.PEDFile;
            vcfInfo = managePedFileSetup.lastResult.VCFInfo;
            bamInfo = managePedFileSetup.lastResult.BAMInfo;
            pedInfo = managePedFileSetup.lastResult.PEDInfo;
            reason = managePedFileSetup.lastResult.PEDAction.ActionDescription;

            pedEntry.refresh();

            sample_idList = XMLList(<PEDEntry kindred_id="" sample_id="0" paternal_id="0" maternal_id="0" sex="" affection_status="1" project="" bam="" vcf="" />);
            sample_idList += new XMLList(pedFile.PEDEntry.toXMLString());

            bamList = XMLList(<BAMPath path = "" />);
            bamList += new XMLList(bamInfo.BAMPath.toXMLString());

            vcfList = XMLList(<VCFPath path = "" />);
            vcfList += new XMLList(vcfInfo.VCFPath.toXMLString());

            thereason = reason[0].@reason;
            setDirections(thereason);
            setColumnWidths();

        }

        private function nextPedFile():void {
            currentPedFile++;
            if (currentPedFile > pedInfo.PEDPath.length()) {
                currentPedFile = 1;
            }

            theTitle = "Manage Ped File" + " --" + getPedFileName(currentPedFile);

            // setup to manage the specified ped file
            setupPedFile();
        }

        private function getPedFileName(currentPedFile:int):String {
            var theName:String = "";

            theName = pedInfo.PEDPath[currentPedFile - 1].@path;
            if (theName != null) {
                var ipos:int = theName.lastIndexOf("/");
                if (ipos >= 0) {
                    theName = " " + theName.substring(ipos + 1);
                }
            }

            return theName;
        }


        private function toggleShowProbands(onlyParents:Boolean):void {
            if (onlyParents) {
                pedEntry.filterFunction = filterParents;
                pedEntry.refresh();
            }
            else {
                pedEntry.filterFunction = null;
                pedEntry.refresh();
            }
        }

        private function filterParents(item:XML):Boolean {
            if (item.@maternal_id == "0" || item.@paternal_id == "0") {
                return false;
            }
            return true;
        }

        private function isDirty( event:DataGridEvent ):void {
            // it is OK if the user cancels the edit
            if ( event.reason == DataGridEventReason.CANCELLED) {
                return;
            }

            // allow them to save the changes
            this.saveAction.visible = true;
            this.saveAction.includeInLayout = true;
            okToSave = true;
        }

        // adjusts the width of each column to allow for the longest text
        private function setColumnWidths():void {
            var columnsLongestText:Array = new Array();

            var numberOfColumns:int = pedfileGrid.columns.length;
            var numberOfRows:Number = pedfileGrid.dataProvider.length;
            var j:int;


            for (j = 0; j < numberOfColumns; j++) {
                columnsLongestText[pedfileGrid.columns[j].dataField] = "";
            }

            for (var i:Number = 0; i < numberOfRows; i++) {
                for (j = 0; j < numberOfColumns; j++) {
                    if(columnsLongestText[pedfileGrid.columns[j].dataField] != null) {
                        var currentValue:String = pedfileGrid.dataProvider[i][pedfileGrid.columns[j].dataField];
                        var lastValue:String = columnsLongestText[pedfileGrid.columns[j].dataField];

                        if(currentValue && currentValue.length > lastValue.length) {
                            columnsLongestText[pedfileGrid.columns[j].dataField] = currentValue;
                        }
                    }
                }
            }

            for (j = 0; j < numberOfColumns; j++) {
                if(columnsLongestText[pedfileGrid.columns[j].dataField] != null) {
                    var columnLongText:String = columnsLongestText[pedfileGrid.columns[j].dataField];
                    if(pedfileGrid.columns[j].headerText.length > columnLongText.length) {
                        columnLongText = pedfileGrid.columns[j].headerText + "  ";
                    }

                    pedfileGrid.columns[j].width = measureText(columnLongText).width + 60 ;
                }
            }
        }

        ]]>
	</mx:Script>

    <mx:XMLListCollection id="pedEntry" source="{pedFile.PEDEntry}"/>
    <mx:XMLList id="sample_idList">
        <PEDEntry kindred_id="" sample_id="0" paternal_id="0" maternal_id="0" sex="" affection_status="1" project="" bam="" vcf="" />
    </mx:XMLList>
    <mx:XMLList id="vcfList">
        <VCFPath path="" />
    </mx:XMLList>
    <mx:XMLList id="bamList">
        <BAMPath path="" />
    </mx:XMLList>
    <mx:XMLList id="sexList">
        <SEXValues sex="Unknown" />
        <SEXValues sex="Male" />
        <SEXValues sex="Female" />
    </mx:XMLList>
    <mx:XMLList id="affectedList">
        <AFFECTEDValues affection_status="Unknown" />
        <AFFECTEDValues affection_status="Yes" />
        <AFFECTEDValues affection_status="No" />
    </mx:XMLList>

    <mx:Text id="errorAction" text="{errorMessage}" color="#FF0000" visible="false" includeInLayout="false"/>

    <mx:Text id="parentAction" text="Specify maternal and paternal ids." color="#1D22E0" visible="false"
             includeInLayout="false"/>

    <mx:Text id="saveAction" text="Press Save to save the modified ped file." color="#1D22E0" visible="false"
             includeInLayout="false"/>

    <mx:Text id="launchAction" text="Click on the sample_id of the trio proband then press Launch." color="#1D22E0"
             visible="false" includeInLayout="false"/>

    <mx:HBox>
        <mx:CheckBox  label="Only show samples with parents" id="showProbandsCheckBox" click="{toggleShowProbands(showProbandsCheckBox.selected)}" horizontalGap="0" fontSize="11"/>
    </mx:HBox>

    <mx:DataGrid id="pedfileGrid" width="100%" dataProvider="{this.pedEntry}" editable="true" sortableColumns="true" horizontalScrollPolicy="auto"
                 maxWidth="951"
                 itemClick="{selectedProband = pedfileGrid.selectedItem}" allowMultipleSelection="false" itemEditEnd="isDirty(event)">

        <mx:columns>
            <mx:DataGridColumn dataField="@sample_id" headerText="Sample_Id" width="110" editable="false"/>

            <mx:DataGridColumn id="paternal_id" editable="true" headerText="Paternal_Id" resizable="false" width="110"
                               dataField="@paternal_id" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(sample_idList, '@sample_id', '@sample_id', '@paternal_id','', false, true)}"
                               itemEditor="{hci.flex.controls.ComboBox.getFactory(sample_idList, '@sample_id', '@sample_id', '@paternal_id', true)}"/>

            <mx:DataGridColumn id="maternal_id" editable="true" headerText="Maternal_Id" resizable="false" width="110"
                               dataField="@maternal_id" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(sample_idList, '@sample_id', '@sample_id', '@maternal_id','', false, true)}"
                               itemEditor="{hci.flex.controls.ComboBox.getFactory(sample_idList, '@sample_id', '@sample_id', '@maternal_id', true)}"/>

            <mx:DataGridColumn dataField="@sex" headerText="Sex"
                               visible="true" width="160" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(sexList, '@sex', '@sex', '@sex','', false, true)}"
                               itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(sexList, '@sex', '@sex', '@sex', false, true, false).newInstance(), '')}" />

            <mx:DataGridColumn dataField="@affection_status" headerText="Affected"
                               visible="true" width="110" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(affectedList, '@affection_status', '@affection_status', '@affection_status','', false, true)}"
                               itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(affectedList, '@affection_status', '@affection_status', '@affection_status', false, true, false).newInstance(), '')}" />

            <mx:DataGridColumn dataField="@vcf" headerText="Vcf"
                               visible="true" width="260" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(vcfList, '@path', '@path', '@vcf','', false, true)}"
                               itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(vcfList, '@path', '@path', '@vcf', false, true, false).newInstance(), '')}" />

            <mx:DataGridColumn dataField="@bam" headerText="Bam"
                               visible="true" width="260" rendererIsEditor="false" editorDataField="value"
                               sortable="false"
                               itemRenderer="{views.renderers.DropdownLabel.create(bamList, '@path', '@path', '@bam','', false, true)}"
                               itemEditor="{hci.flex.controls.ComboBox.getFactory(bamList, '@path', '@path', '@bam', true)}" />

        </mx:columns>

    </mx:DataGrid>

    <mx:ControlBar width="951" horizontalAlign="right">
        <mx:Button label="Next" id="nextButton" click="nextPedFile()" icon="@Embed(source='../../assets/iobio.png')"
                   enabled="{moreThanOne}" visible="{moreThanOne}" includeInLayout="{moreThanOne}"
                   disabledIcon="@Embed(source='../../assets/iobio_disable.png')"/>
        <mx:Button label="Launch" id="launchButton" click="launchViewer()"
                   icon="@Embed(source='../../assets/iobio.png')"
                   enabled="{selectedProband != null}"
                   disabledIcon="@Embed(source='../../assets/iobio_disable.png')"/>
        <mx:Button label="Save" id="saveButton" click="savePedFile()" icon="@Embed(source='../../assets/iobio.png')"
                   enabled="{okToSave}"
                   disabledIcon="@Embed(source='../../assets/iobio_disable.png')"/>
        <mx:Button label="Cancel" click="{mx.managers.PopUpManager.removePopUp(this)}"/>
    </mx:ControlBar>


</mx:TitleWindow>
